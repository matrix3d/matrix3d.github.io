/**
 * Generated by Apache Flex Cross-Compiler from TestWebgl.as
 * TestWebgl
 *
 * @fileoverview
 *
 * @suppress {checkTypes}
 */

goog.provide('TestWebgl');

goog.require('flash.geom.Matrix3D_ARRAY');
goog.require('flash.geom.Vector3D');
goog.require('org.apache.flex.utils.Language');




/**
 * @constructor
 */
TestWebgl = function() {
};


/**
 * @export
 */
TestWebgl.prototype.start = function() {
  var self = this;
  var /** @type {HTMLCanvasElement} */ canvas = org.apache.flex.utils.Language.as(document.createElement("canvas"), HTMLCanvasElement);
  document.body.appendChild(canvas);
  canvas.width = 400;
  canvas.height = 400;
  var /** @type {WebGLRenderingContext} */ gl = org.apache.flex.utils.Language.as((canvas.getContext("webgl") || canvas.getContext("experimental-webgl")), WebGLRenderingContext);
  gl.clearColor(0, 0, 0, 1);
  gl.enable(WebGLRenderingContext.DEPTH_TEST);
  gl.depthFunc(WebGLRenderingContext.LEQUAL);
  gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT | WebGLRenderingContext.DEPTH_BUFFER_BIT);
  var /** @type {string} */ vcode = "attribute vec3 pos;" + "attribute vec3 color;" + "varying vec3 vColor;" + "uniform mat4 mvp;" + "void main(void) {" + "vColor=color;" + "gl_Position =mvp*vec4(pos, 1.0);" + "}";
  var /** @type {string} */ fcode = "precision mediump float;" + "varying vec3 vColor;" + "void main(void) {" + "gl_FragColor = vec4(vColor,1);" + "}";
  var /** @type {WebGLShader} */ fshader = gl.createShader(WebGLRenderingContext.FRAGMENT_SHADER);
  var /** @type {WebGLShader} */ vshader = gl.createShader(WebGLRenderingContext.VERTEX_SHADER);
  gl.shaderSource(fshader, fcode);
  gl.compileShader(fshader);
  gl.shaderSource(vshader, vcode);
  gl.compileShader(vshader);
  var /** @type {WebGLProgram} */ program = gl.createProgram();
  gl.attachShader(program, vshader);
  gl.attachShader(program, fshader);
  gl.linkProgram(program);
  gl.useProgram(program);
  gl.enableVertexAttribArray(0);
  gl.enableVertexAttribArray(1);
  var /** @type {WebGLBuffer} */ buffer = gl.createBuffer();
  gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, buffer);
  gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER, new Float32Array([0, .7, 0, -.7, -.7, 0, .7, -.7, 0]), WebGLRenderingContext.STATIC_DRAW);
  gl.vertexAttribPointer(0, 3, WebGLRenderingContext.FLOAT, false, 0, 0);
  buffer = gl.createBuffer();
  gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, buffer);
  gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]), WebGLRenderingContext.STATIC_DRAW);
  gl.vertexAttribPointer(1, 3, WebGLRenderingContext.FLOAT, false, 0, 0);
  var /** @type {WebGLBuffer} */ ibuffer = gl.createBuffer();
  gl.bindBuffer(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, ibuffer);
  gl.bufferData(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2]), WebGLRenderingContext.STATIC_DRAW);
  gl.clearColor(0, 0, 0, 1);
  gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);
  gl.bindBuffer(WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, ibuffer);
  var /** @type {flash.geom.Matrix3D_ARRAY} */ matr = new flash.geom.Matrix3D_ARRAY();
  setInterval(function() {
    var /** @type {WebGLUniformLocation} */ mvpLoction = gl.getUniformLocation(program, "mvp");
    matr.appendRotation(1, flash.geom.Vector3D.Z_AXIS);
    gl.uniformMatrix4fv(mvpLoction, false, matr.rawData);
    gl.drawElements(WebGLRenderingContext.TRIANGLES, 3, WebGLRenderingContext.UNSIGNED_SHORT, 0);
  }, 1000 / 60);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
TestWebgl.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'TestWebgl', qName: 'TestWebgl'}] };


// Ensures the symbol will be visible after compiler renaming.
goog.exportSymbol('TestWebgl', TestWebgl);
