/**
 * Generated by Apache Flex Cross-Compiler from TestMouseEvent.as
 * TestMouseEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('TestMouseEvent');

goog.require('flash.display.Sprite');
goog.require('flash.events.MouseEvent');
goog.require('flash.text.TextField');
goog.require('org.apache.flex.utils.Language');



/**
 * @constructor
 * @extends {flash.display.Sprite}
 */
TestMouseEvent = function() {
  TestMouseEvent.base(this, 'constructor');
  for (var /** @type {number} */ i = 0; i < 100; i++) {
    var /** @type {flash.display.Sprite} */ s = new flash.display.Sprite();
    s.graphics.beginFill(0xffffff * Math.random());
    var /** @type {number} */ w = 50 + 50 * Math.random();
    var /** @type {number} */ h = 50 + 50 * Math.random();
    s.graphics.drawRect(-w / 2, -h / 2, w, h);
    s.rotation = Math.random() * 360;
    s.x = 400 * Math.random();
    s.y = 400 * Math.random();
    s.addEventListener(flash.events.MouseEvent.MOUSE_OUT, org.apache.flex.utils.Language.closure(this.s_mouseOut, this, 's_mouseOut'));
    s.addEventListener(flash.events.MouseEvent.MOUSE_OVER, org.apache.flex.utils.Language.closure(this.s_mouseOver, this, 's_mouseOver'));
    this.addChild(s);
    s.addEventListener(flash.events.MouseEvent.CLICK, org.apache.flex.utils.Language.closure(this.s_mouseevent, this, 's_mouseevent'));
    s.addEventListener(flash.events.MouseEvent.CONTEXT_MENU, org.apache.flex.utils.Language.closure(this.s_mouseevent, this, 's_mouseevent'));
    s.addEventListener(flash.events.MouseEvent.DOUBLE_CLICK, org.apache.flex.utils.Language.closure(this.s_mouseevent, this, 's_mouseevent'));
    s.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, org.apache.flex.utils.Language.closure(this.s_mouseevent, this, 's_mouseevent'));
    s.addEventListener(flash.events.MouseEvent.MOUSE_MOVE, org.apache.flex.utils.Language.closure(this.s_mouseevent, this, 's_mouseevent'));
    s.addEventListener(flash.events.MouseEvent.MOUSE_UP, org.apache.flex.utils.Language.closure(this.s_mouseevent, this, 's_mouseevent'));
  }
  this.tf = new flash.text.TextField();
  this.tf.y = 200;
  this.addChild(this.tf);
};
goog.inherits(TestMouseEvent, flash.display.Sprite);


/**
 * @private
 * @type {flash.text.TextField}
 */
TestMouseEvent.prototype.tf;


/**
 * @private
 * @param {flash.events.MouseEvent} e
 */
TestMouseEvent.prototype.s_mouseevent = function(e) {
  this.tf.text = e.type;
  org.apache.flex.utils.Language.trace(e.type, e.localX, e.localY);
};


/**
 * @private
 * @param {flash.events.MouseEvent} e
 */
TestMouseEvent.prototype.s_mouseOut = function(e) {
  var /** @type {flash.display.DisplayObject} */ t = org.apache.flex.utils.Language.as(e.currentTarget, flash.display.DisplayObject);
  t.alpha = 1;
  t.scaleX = t.scaleY = 1;
};


/**
 * @private
 * @param {flash.events.MouseEvent} e
 */
TestMouseEvent.prototype.s_mouseOver = function(e) {
  var /** @type {flash.display.DisplayObject} */ t = org.apache.flex.utils.Language.as(e.currentTarget, flash.display.DisplayObject);
  t.alpha = .5;
  t.scaleX = t.scaleY = 1.2;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
TestMouseEvent.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'TestMouseEvent', qName: 'TestMouseEvent'}] };


// Ensures the symbol will be visible after compiler renaming.
goog.exportSymbol('TestMouseEvent', TestMouseEvent);
